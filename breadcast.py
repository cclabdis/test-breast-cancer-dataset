# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/149ImzbS6Z80skkIEX_7kg8SrbstPVA7e
"""

import pandas as pd

df = pd.read_csv('breast-cancer.csv')

df.head()

df['diagnosis'].value_counts()

df['diagnosis_maligno'] = df['diagnosis'].apply(lambda x: 1 if x== 'M' else 0)

df['diagnosis_maligno'].value_counts()

from sklearn.model_selection import train_test_split

df.columns

X = df[['radius_mean', 'texture_mean', 'perimeter_mean',
       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',
       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',
       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',
       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',
       'fractal_dimension_se', 'radius_worst', 'texture_worst',
       'perimeter_worst', 'area_worst', 'smoothness_worst',
       'compactness_worst', 'concavity_worst', 'concave points_worst',
       'symmetry_worst', 'fractal_dimension_worst']]

y = df  ['diagnosis_maligno']

X_train, X_test, y_train, y_test = train_test_split(X , y, test_size =0.1)
X_train, X_val, y_train, y_val = train_test_split(X_train , y_train, test_size =0.1)

X_train, X_test, y_train, y_test  train_test_split(X , y, test_size =0.1)
X_train, X_val, y_train, y_val  trein_test_split(X_train , y_train, test_size =0.1)

len(X_train)

len(X_test)

len(X_val)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

X_train =sc.fit_transform(X_train)
X_test =sc.fit_transform(X_test)
X_val =sc.fit_transform(X_val)

X_train

"""Agora temos que definir a estrutura
Compilar
Treinar
e por ultimo Avaliar
"""

import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

def build_model():
  model = Sequential()
  model.add(Dense(input_dim=30, units=10, activation="relu"))
  model.add(Dense(10, activation="relu"))

  model.add(Dense(1, activation="sigmoid"))

  return model

model = build_model()

model.summary()

X_train.shape

adam = Adam(lr=0.01)
model.compile(loss='binary_crossentropy',
              optimizer=adam,
              metrics=['accuracy'])

model.fit(x=X_train, y=y_train, validation_data=(X_val, y_val), batch_size=16, epochs=10)

y_pred = model.predict(X_test)

from sklearn.metrics import confusion_matrix

cn = confusion_matrix(y_test, y_pred>0.5)

print(cn)